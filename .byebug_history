c
OEmbed::Providers::Youtube.get(string).html rescue OEmbed::Providers::Instagram.get(string).html rescue string
 (OEmbed::Providers::Youtube.get(string) rescue OEmbed::Providers::Instagram.get(string) rescue string).html
 OEmbed::Providers::Youtube.get(string) rescue OEmbed::Providers::Instagram.get(string) rescue string
 (OEmbed::Providers::Youtube.get(string) rescue {OEmbed::Providers::Instagram.get(string) rescue string})
 (OEmbed::Providers::Youtube.get(string) rescue (OEmbed::Providers::Instagram.get(string) rescue string)
 (OEmbed::Providers::Youtube.get(string) rescue (OEmbed::Providers::Instagram.get(string)rescue string)
 ((OEmbed::Providers::Youtube.get(string) rescue (OEmbed::Providers::Instagram.get(string)rescue string))
 ((OEmbed::Providers::Youtube.get(string) rescue (OEmbed::Providers::Instagram.get(string)rescue string)).html
string = "https://www.instagram.com/p/BCyMGVlr95T/ss"
s = "https://www.instagram.com/p/BCyMGVlr95T/ss"
s = https://www.instagram.com/p/BCyMGVlr95T/ss
 (OEmbed::Providers::Youtube.get(string) rescue (OEmbed::Providers::Instagram.get(string)rescue string)).html
OEmbed::Providers::Instagram.get("https://www.instagram.com/p/BCyMGVlr95T/ss") rescue 1
OEmbed::Providers::Instagram.get("https://www.instagram.com/p/BCyMGVlr95T/ss")
OEmbed::Providers::Instagram.get("https://www.instagram.com/p/BCyMGVlr95T/")
OEmbed::Providers::Instagram.get("http://blog.instagram.com/post/141905496242/160329-video")
OEmbed::Providers::Instagram.get("https://instagram.fbom1-2.fna.fbcdn.net/t51.2885-19/s150x150/14032797_1650541105260097_1110116688_a.jpg")
c
resource = mys.get("https://www.instagram.com/p/BCyMGVlr95T/")
resource = mys.get("https://www.instagram.com/p/BCyMGVlr95T")
resource = mys.get("https://www.instagram.com/p/BCyMGVlr95T/")
mys << "http://*.instagram.com/p/*"
mys = OEmbed::Provider.new("http://api.instagram.com/oembed")
resource = mys.get("https://www.instagram.com/p/BCyMGVlr95T/")
mys << "http://*.instagram.com/p/*"
mys = OEmbed::Provider.new("http://api.instagram.com/oembed.{format}")
my_provider[0]
my_provider.first
my_provider
resource = my_provider.get("https://www.instagram.com/p/BCyMGVlr95T/")
my_provider << "http://*.instagram.com/p/*"
resource = my_provider.get("https://www.instagram.com/p/BCyMGVlr95T/")
my_provider << "http://*instagram.com/video/*"
my_provider = OEmbed::Provider.new("http://api.instagram.com/oembed.{format}")
c
body.split
body.split(/\W/)
body.split(/\W+/)
body
c
params[:user][:title]
params[:user]
params[user]
params
c
x
raw article.body.split(/\ +/).collect{|string| string.split.grep(url_regexp).empty? ? (string)  : (OEmbed::Providers::Youtube.get(string).html)}.join(' ')
OEmbed::Providers::Youtube.get(string)
raw article.body.split(/\ +/).collect{|string| string.split.grep(url_regexp).empty? ? (string)  : (OEmbed::Providers::Youtube.get(string).html)}.join(' ')
url_regexp = /http:\/\/\w/
c
raw article.body.split(/\ +/).collect{|string| string.split.grep(url_regexp).empty? ? (string)  : (OEmbed::Providers::Youtube.get(string).html)}.join(' ')
url_regexp = /http:\/\/\w/
c
self
:body
@articles
params
body
article
c
article
c
article
params
c
OEmbed::Providers::Youtube.get(url).html
OEmbed::Providers::Youtube.get(url)
c
URI.extract(article.body)
url
c
string.scan(URI.regexp) do |*matches| p$& end
string = article.body
article.body
article.body.scan(URI.regexp) do |*matches| p$& end
article.body.scan(URI.regexp) do |*matches| 
 c
c
article.body.scan(URI.regexp) do |*matches| p $& endc
article.body.scan(URI.regexp) do |*matches| p $& end
article.body.scan(URI.regexp) do |*matches| $& end
article.body.scan(URI.regexp) do |*matches| p end
article.body.scan(URI.regexp) do |*matches| p $& end
article.body.scan(URI.regexp) do |*matches| 
article
c
body
c
value
self
params
ad
@articles
c
 @articles = Article.all.page(params[:page]).per(10)
c
@articles.page(params[:page]).per(10) 
collection.page(params[:page]).per(10) 
c
Article.last.body.scan(URI.regexp) do |*matches| p $& end
Article.last.body.scan(URI.regexp) do |*matches| p $ end
Article.last.body.scan(URI.regexp) do |*matches| p $& end
Article.last.body.scan(URI.regexp) do |*matches| p end
Article.last.body.scan(URI.regexp) do |*matches|  $& end
Article.last.body.scan(URI.regexp) do |*matches| p $& end
Article.last.body.scan(URI.regexp)
Article.last.body
Article.last
c
Article.first.id
Article.all
Article
Artical
params
